#include <bits/stdc++.h> 
bool areAnagram(string &str1, string &str2){
    // Write your code here.
     // If the lengths of the two strings are different, they can't be anagrams
    if (str1.length() != str2.length()) {
        return false;
    }

    // Use unordered_map to count the frequency of each character in both strings
    unordered_map<char, int> charCount;

    // Count characters in the first string
    for (char ch : str1) {
        charCount[ch]++;
    }

    // Subtract the count for characters in the second string
    for (char ch : str2) {
        if (charCount.find(ch) == charCount.end() || charCount[ch] == 0) {
            // If a character is not present in the first string or has already been used up, return false
            return false;
        }
        charCount[ch]--;
    }

    return true;
}


#include <cstdlib>
#include <fstream>
#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <cstring>


using namespace std;
#include "solution.h"

class Runner
{
    int t;
    vector<vector<string> > arr;

public:
    void takeInput()
    {
        cin >> t;

        for (int c = 0; c < t; c++)
        {
            vector<string> temp(2);
            for(int i=0;i<2;i++)
                cin>>temp[i];
                arr.push_back(temp);
        }

    }


    void execute()
    {
        vector<vector<string> > arrCopy = arr;
        for (int i = 0; i < t; i++)
        {
            areAnagram(arrCopy[i][0], arrCopy[i][1]);
        }
    }

    void executeAndPrintOutput()
    {
        for (int i = 0; i < t; i++)
        {
            cout<<areAnagram(arr[i][0], arr[i][1])<<endl;
        }
    }
};

int main()
{
    Runner runner;
    runner.takeInput();
    runner.executeAndPrintOutput();
    return 0;
}

